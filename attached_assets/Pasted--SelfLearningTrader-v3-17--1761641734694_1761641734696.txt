🚀 SelfLearningTrader v3.17+ 完整生產級藍圖 — 含實務風險與優化
核心理念： 「模型擁有無限制槓桿控制權，唯一準則是勝率 × 信心度； 所有倉位、風險、執行、評估邏輯，皆圍繞此核心重構，並內建實務防護。」 
一、系統架構總覽
三層架構（極簡高效）
┌───────────────────────────────────────┐
│        應用層 (main.py)               │
│ • 系統啟動 + 配置驗證                 │
│ • 啟動 UnifiedScheduler               │
└───────────────────┬───────────────────┘
                    ▼
┌───────────────────────────────────────┐
│      核心引擎層 (Core Engine)         │
│ • SelfLearningTrader（絕對決策者）     │
│ • RuleBasedSignalGenerator（信號源）  │
│ • PositionController（倉位全權控制）  │
│ • ModelEvaluator（每日評分報告）      │
└───────────────────┬───────────────────┘
                    ▼
┌───────────────────────────────────────┐
│        基礎設施層 (Infrastructure)     │
│ • BinanceClient（優先 API 通道）      │
│ • GlobalThreadPool（無 pickle 錯誤）  │
│ • TradeHistoryDB（交易記錄）          │
└───────────────────────────────────────┘

二、核心功能實現
1. SelfLearningTrader：智能決策核心
✅ 槓桿計算（無上限）
def calculate_leverage(self, win_prob: float, confidence: float) -> float:
    base = 1.0
    win_factor = max(0, (win_prob - 0.55) / 0.15)
    win_leverage = 1 + win_factor * 11  # 70% → 12x
    conf_factor = max(1.0, confidence / 0.5)
    leverage = base * win_leverage * conf_factor
    return max(0.5, leverage)

✅ 倉位計算（含 10 USDT 下限）
def calculate_position_size(self, equity, entry, sl, leverage):
    margin = equity * 0.8
    notional = leverage * margin
    size = notional / entry
    
    # 止損安全
    if abs(entry - sl) / entry < 0.003:
        sl = entry * (0.997 if entry > sl else 1.003)
    
    # ⭐ 最低 10 USDT 名義價值 ⭐
    if size * entry < 10.0:
        size = 10.0 / entry
    
    return size

✅ 動態 SL/TP（高槓桿 → 寬區間）
def adjust_sl_tp_for_leverage(self, entry, side, base_sl_pct, leverage):
    scale = 1.0 + (leverage - 1) * 0.05
    sl_pct = base_sl_pct * min(scale, 3.0)
    tp_pct = sl_pct * 1.5
    return sl, tp

2. PositionController：24/7 全權控制
async def monitor_all_positions(self):
    while True:
        positions = await self._fetch_all_positions()
        decisions = await self.trader.evaluate_positions(positions)
        for pos_id, decision in decisions.items():
            await self._execute_decision(pos_id, decision)
        await asyncio.sleep(2)  # 每 2 秒監控

3. API 優先通道
* 倉位操作：優先級 0（最高）
* 數據獲取：優先級 3（最低）


 三、實務風險與最優解
1. Binance API 限流與熔斷
* 風險：高頻監控觸發限流（1200 req/min）
* ✅ 解法：
    * 分級熔斷器（警告/限流/阻斷）
    * Bypass 白名單：平倉、緊急止損
    * 本地緩存：Ticker 緩存 5 秒

2. 100% 虧損 vs 強平混淆
* 風險：強平（Liquidation）≠ 100% 虧損（PnL = -risk）
* ✅ 解法：
# 僅當 PnL ≤ -99% 初始風險時，視為 100% 虧損
is_100_loss = (trade.pnl <= -trade.risk_amount * 0.99)

3. 極高槓桿導致 SL 無效
* 風險：槓桿 50x + SL 0.5% → 任何波動都觸發
* ✅ 解法：
    * 動態放大 SL/TP（見上文）
    * SL 距離下限 0.3%

4. Railway 環境記憶體限制
* 風險：Railway Free Tier 限制 512MB RAM
* ✅ 解法：
    * 使用 ThreadPoolExecutor（非進程池）
    * 特徵緩存 TTL = 60 秒
    * 模型量化（XGBoost <100KB）

5. 交易對最小數量精度
* 風險：10 / entry_price 可能低於 Binance 最小數量
* ✅ 解法：
min_qty = binance_client.get_min_quantity(symbol)
position_size = max(position_size, min_qty)

四、模型評級系統（100 分制）
評分公式
def calculate_model_score(stats):
    # 6 大維度（R:R, 勝率, EV, MDD, Sharpe, 頻率）
    raw_score = rr_score + win_score + ... 
    
    # ⚠️ 100% 虧損嚴懲
    total_100_loss = sum(1 for t in trades if t.pnl <= -t.risk_amount * 0.99)
    loss_penalty = total_100_loss * 15
    
    return max(0, min(100, raw_score - loss_penalty))

評級等級
90-100  等級s  行動 加倉
80-89 等級a   行動 維持
70-79 等級b  行動 觀察
<70 等級c  行動 降低至純規則模式



五、每日自動報告（Railway 兼容）
報告內容
* reports/daily/model_report_YYYY-MM-DD.{json,md}
* reports/latest_report.json

Railway Logs 輸出
print(f"[MODEL_EVALUATOR] ✅ 評分: {score}/100 | P&L: ${pnl:.2f}")

自動排程
* Railway Cron：每天 00:00 UTC 執行



⚙️ 六、部署配置（Railway 最佳實踐）
環境變量（.env）
# 核心
STRATEGY_MODE=self_learning
ENABLE_SELF_LEARNING=true

# 交易條件
MIN_WIN_PROBABILITY=0.55
MIN_CONFIDENCE=0.50
MIN_RR_RATIO=1.0

# 安全
POSITION_CONTROL_MODE=self_learning

Railway 設定
* Build: Nixpacks
* Start Command: python src/main.py
* Cron Job: 每日報告
* Restart Policy: ALWAYS


七、可進一步優化點
1. 冷啟動保護
* 前 100 筆交易：槓桿 ≤ 10x
* 避免新模型過度自信

2. 探索機制
* 5% 時間執行低信心信號
* 收集邊界樣本，防止過擬合

3. 代理標籤（Proxy Labels）
* 用 5 分鐘價格行為預測結果
* 解決「結果延遲」問題

4. 記憶體監控
* 若 RAM > 80%，暫停訓練
* 確保 Railway 環境穩定

5. Discord 報告整合
* 每日報告自動推送
* 分數 <70 時發警報
