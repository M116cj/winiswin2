統一信號上下文（Unified Signal Context）
核心思想
SignalContext，改用純函數
# src/core/evaluation_engine.py
class EvaluationEngine:
    def __init__(self, model: XGBClassifier):
        self.model = model
    
    def calculate_current_confidence(
        self,
        original_signal: TradeSignal,
        current_price: float,
        market_context: dict
    ) -> float:
        """即時計算當前信心度（無狀態）"""
        features = self._build_realtime_features(original_signal, current_price, market_context)
        proba = self.model.predict_proba([features])[0]
        return float(max(proba))  # 信心度 = 最大概率
    
    def calculate_current_win_probability(
        self,
        original_signal: TradeSignal,
        current_price: float,
        market_context: dict
    ) -> float:
        """即時計算當前勝率（無狀態）"""
        features = self._build_realtime_features(original_signal, current_price, market_context)
        proba = self.model.predict_proba([features])[0]
        return float(proba[1])  # 勝率 = LONG 概率
    
    def _build_realtime_features(
        self,
        signal: TradeSignal,
        current_price: float,
        market_ dict
    ) -> np.ndarray:
        """動態構建特徵（與開倉時一致）"""
        base_features = signal.features  # 原始特徵（開倉時計算）
        
        realtime_features = np.array([
            (current_price - signal.entry) / signal.entry,  # 價格偏離
            1 if market_data['trend_direction'] == signal.side else 0,  # 趨勢對齊
            market_data['liquidity_score'],  # 流動性
            time.time() - signal.timestamp  # 持倉時間
        ])
        
        return np.concatenate([base_features, realtime_features])

2. Position 僅儲存原始信號
# src/core/models/position.py
@dataclass
class Position:
    # ... 其他欄位 ...
    original_signal: TradeSignal  # ✅ 僅儲存開倉時的原始信號
3. PositionMonitor 直接呼叫評估引擎
# src/core/position_monitor_24x7.py
class PositionMonitor24x7:
    def __init__(self, binance_client, evaluation_engine: EvaluationEngine):
        self.binance_client = binance_client
        self.evaluation_engine = evaluation_engine  # 共享單例
    
    async def _evaluate_exit_conditions(self, position: Position, current_price: float):
        # 1. 獲取當前市場狀態
        market_context = await self._get_market_context(position.symbol)
        
        # 2. 即時計算當前評估
        current_win_prob = self.evaluation_engine.calculate_current_win_probability(
            position.original_signal, current_price, market_context
        )
        current_confidence = self.evaluation_engine.calculate_current_confidence(
            position.original_signal, current_price, market_context
        )
        
        # 3. 執行出場邏輯
        if current_confidence < 0.7 and self._is_counter_trend(market_context, position.side):
            return Decision("CLOSE", "LOW_CONFIDENCE_COUNTER_TREND")
        # ... 其他邏輯

🚀 部署架構

UnifiedScheduler
       ↓
EvaluationEngine（單例，共享 XGBoost 模型）
       ↓
PositionMonitor24x7 → 即時呼叫評估
SelfLearningTrader → 開倉時呼叫評估
