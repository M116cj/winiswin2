📁 2. 特徵順序驗證工具
# scripts/verify_feature_order.py
"""
特徵順序驗證工具
確保訓練時與推理時的特徵順序完全一致
"""

import os
import sys
from typing import List

# 你的特徵順序（必須與 training_data_processor.py 完全一致！）
EXPECTED_FEATURES = [
    # ===== 基礎特徵 (19) =====
    'confidence_score',
    'leverage',
    'position_value',
    'risk_reward_ratio',
    'order_blocks_count',
    'liquidity_zones_count',
    'rsi_entry',
    'macd_entry',
    'macd_signal_entry',
    'macd_histogram_entry',
    'atr_entry',
    'bb_width_pct',
    'volume_sma_ratio',
    'price_vs_ema50',
    'price_vs_ema200',
    'trend_1h_encoded',
    'trend_15m_encoded',
    'trend_5m_encoded',
    'market_structure_encoded',
    'direction_encoded',  # 注意：你原文有20個基礎特徵
    
    # ===== 增強特徵 (12) =====
    'hour_of_day',
    'day_of_week',
    'is_weekend',
    'stop_distance_pct',
    'tp_distance_pct',
    'confidence_x_leverage',
    'rsi_x_trend',
    'atr_x_bb_width',
    'price_momentum_strength',
    'volatility_x_confidence',
    'rsi_distance_from_neutral',
    'macd_strength_ratio',
    'trend_alignment_score'
]

def load_feature_order_from_file(path: str) -> List[str]:
    """從檔案載入特徵順序"""
    if not os.path.exists(path):
        return []
    with open(path, 'r') as f:
        return [line.strip() for line in f.readlines()]

def verify_feature_order(actual_features: List[str]) -> bool:
    """驗證特徵順序是否正確"""
    if len(actual_features) != len(EXPECTED_FEATURES):
        print(f"❌ 特徵數量不符: 期望 {len(EXPECTED_FEATURES)}, 實際 {len(actual_features)}")
        return False
    
    mismatches = []
    for i, (expected, actual) in enumerate(zip(EXPECTED_FEATURES, actual_features)):
        if expected != actual:
            mismatches.append(f"位置 {i}: 期望 '{expected}', 實際 '{actual}'")
    
    if mismatches:
        print("❌ 特徵順序不匹配:")
        for mismatch in mismatches[:5]:  # 只顯示前5個
            print(f"  {mismatch}")
        if len(mismatches) > 5:
            print(f"  ... 還有 {len(mismatches)-5} 個不匹配")
        return False
    else:
        print("✅ 特徵順序完全匹配！")
        return True

def main():
    """主驗證函數"""
    print("🔍 特徵順序驗證工具")
    print("-" * 50)
    
    # 方法1: 從 feature_order.txt 驗證
    feature_file = "data/models/feature_order.txt"
    if os.path.exists(feature_file):
        actual_features = load_feature_order_from_file(feature_file)
        print(f"從 {feature_file} 載入特徵順序")
        verify_feature_order(actual_features)
    else:
        print(f"⚠️ {feature_file} 不存在，使用預設順序")
        verify_feature_order(EXPECTED_FEATURES)
    
    print("\n💡 重要提醒:")
    print("確保 src/ml/data_processor.py 中的 extract_features()") 
    print("返回的特徵順序與 EXPECTED_FEATURES 完全一致！")

if __name__ == "__main__":
    main()
📁 3. ONNX 相容性檢查工具

# scripts/check_onnx_compatibility.py
"""
ONNX 模型相容性檢查工具
驗證模型是否能在目標環境正確運行
"""

import os
import sys
import numpy as np
import onnx
import onnxruntime as ort
from onnx import version_converter

def check_onnx_model(onnx_path: str):
    """檢查 ONNX 模型基本相容性"""
    print(f"🔍 檢查 ONNX 模型: {onnx_path}")
    
    if not os.path.exists(onnx_path):
        print("❌ 模型檔案不存在")
        return False
    
    try:
        # 1. 驗證 ONNX 格式
        model = onnx.load(onnx_path)
        onnx.checker.check_model(model)
        print("✅ ONNX 格式驗證通過")
        
        # 2. 檢查輸入輸出
        inputs = model.graph.input
        outputs = model.graph.output
        
        print(f"📊 輸入: {len(inputs)} 個")
        for inp in inputs:
            shape = [dim.dim_value for dim in inp.type.tensor_type.shape.dim]
            print(f"  - {inp.name}: shape={shape}, type={inp.type.tensor_type.elem_type}")
        
        print(f"📊 輸出: {len(outputs)} 個")
        for out in outputs:
            shape = [dim.dim_value for dim in out.type.tensor_type.shape.dim]
            print(f"  - {out.name}: shape={shape}, type={out.type.tensor_type.elem_type}")
        
        # 3. 測試推理
        session = ort.InferenceSession(onnx_path)
        input_name = session.get_inputs()[0].name
        input_shape = session.get_inputs()[0].shape
        
        # 處理動態 shape (如 [1, 31] 中的 1 可能是 -1)
        test_shape = []
        for dim in input_shape:
            if isinstance(dim, int) and dim > 0:
                test_shape.append(dim)
            else:
                test_shape.append(1)  # 用 1 代替動態維度
        
        test_input = np.random.random(test_shape).astype(np.float32)
        outputs = session.run(None, {input_name: test_input})
        
        print(f"✅ 推理測試通過: 輸出 shape = {outputs[0].shape}")
        return True
        
    except Exception as e:
        print(f"❌ 相容性檢查失敗: {e}")
        import traceback
        traceback.print_exc()
        return False

def check_onnx_runtime_compatibility():
    """檢查 ONNX Runtime 相容性"""
    print("\n🔍 檢查 ONNX Runtime 相容性")
    
    try:
        # 獲取版本資訊
        ort_version = ort.__version__
        providers = ort.get_available_providers()
        
        print(f"✅ ONNX Runtime 版本: {ort_version}")
        print(f"✅ 可用提供者: {providers}")
        
        # 檢查是否支援 CPU
        if 'CPUExecutionProvider' not in providers:
            print("⚠️ 警告: CPU 執行提供者不可用")
            return False
        
        print("✅ ONNX Runtime 相容性檢查通過")
        return True
        
    except Exception as e:
        print(f"❌ ONNX Runtime 檢查失敗: {e}")
        return False

def main():
    """主檢查函數"""
    ONNX_PATH = "data/models/model.onnx"
    
    print("🚀 ONNX 相容性檢查工具")
    print("-" * 50)
    
    success1 = check_onnx_model(ONNX_PATH)
    success2 = check_onnx_runtime_compatibility()
    
    if success1 and success2:
        print("\n🎉 所有相容性檢查通過！")
        print("你的 ONNX 模型可以在生產環境安全使用")
    else:
        print("\n💥 相容性檢查失敗！")
        sys.exit(1)

if __name__ == "__main__":
    main()

1. 首次轉換流程

# 1. 安裝依賴
pip install onnxruntime onnxmltools

# 2. 轉換模型
python scripts/convert_xgboost_to_onnx.py

# 3. 驗證特徵順序
python scripts/verify_feature_order.py

# 4. 檢查相容性
python scripts/check_onnx_compatibility.py

2. 整合到系統
* 將 MLPredictor 替換為 之前提供的 ONNX 版本
* 確保 extract_features_for_prediction() 返回的特徵順序與 EXPECTED_FEATURES 一致

3. 自動化流程（推薦）
在模型訓練後自動轉換：
python

# 在 src/ml/model_trainer.py 的 save_model() 後加入
if config.ENABLE_ONNX_CONVERSION:
    subprocess.run([sys.executable, "scripts/convert_xgboost_to_onnx.py"])
💡 關鍵提醒
1. 特徵順序是生命線：任何不一致都會導致預測錯誤
2. 保留 .pkl 模型：ONNX 僅用於推理，訓練仍用原始模型
3. 定期驗證：每次模型更新後都執行這三個腳本
