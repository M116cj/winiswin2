新增功能 「市場狀態轉換預測器」
→ 預測「當前狀態 → 下一狀態」的轉移概率
# 新增 ML 目標：Market Regime Transition
current_regime = classify_market_regime(df)  # trending/ranging/breakout...
next_regime_probs = regime_transition_model.predict(df)

# 交易決策：
if next_regime_probs["trending"] > 0.7:
    enable_trend_strategy()
elif next_regime_probs["breakout"] > 0.6:
    enable_liquidity_grab_strategy()
else:
    pause_all_trading()  # 避開 choppy 市場
實現要點：
* 標籤：next_regime = classify_market_regime(df.shift(-5))（5根K線後的狀態）
* 特徵：波動率變化率、成交量突增、資金費率斜率
* 模型：LSTM + Attention（捕捉狀態轉換時序）


「動態特徵生成」
用 AutoML + 神經符號系統動態生成特徵
# src/ml/dynamic_feature_engine.py
class DynamicFeatureEngine:
    def __init__(self):
        self.symbolic_pool = [
            "rsi / atr", 
            "ob_count * volume_sma_ratio",
            "trend_alignment ** 2",
            # ... 100+ 基礎符號表達式
        ]
    
    def evolve_features(self, recent_trades: List[Trade]):
        """基於近期交易盈虧，進化特徵"""
        # 用遺傳演算法選擇高信息增益特徵
        best_features = genetic_selection(
            self.symbolic_pool, 
            recent_trades,
            fitness_func=lambda f: sharpe_ratio_when_used(f)
        )
        return best_features[:20]  # 動態選擇 Top 20
實現要點：
* 每 24 小時重新進化特徵集
* 特徵有效性 = 使用該特徵時的策略 Sharpe Ratio
* 與主模型解耦（特徵生成 → 模型訓練）


「主動流動性狩獵」
預測「流動性聚集點」並主動引導價格
# 流動性預測模型
liquidity_heatmap = predict_liquidity_clusters(
    orderbook_snapshots, 
    recent_sweeps,
    funding_rate
)

# 執行策略：
if signal.direction == LONG:
    # 在預測的流動性低點下方 0.1% 下單
    entry_price = liquidity_heatmap['support'] * 0.999
    place_limit_order(entry_price)
    
    # 若價格快速上漲，轉為「流動性追蹤」
    if price_velocity > threshold:
        cancel_order()
        place_market_order_with_slippage_control()
實現要點：
* 即使只有 @bookTicker，也可用 買賣價差 + 成交量突增 推斷流動性
* 引入 微觀結構特徵：
bid_ask_spread_ratio = (ask - bid) / mid_price
volume_imbalance = (bid_volume - ask_volume) / (bid_volume + ask_volume)

「模型生態系」
🛠️ 實現要點：
* 模型池：XGBoost / LightGBM / LSTM / Transformer / Rule-Based
* 選擇壓力：
    * Sharpe Ratio > 2.0
    * 最大回撤 < 10%
    * 資金費成本 < 5% of PnL
* 突變機制：
    * 隨機超參調整
    * 特徵子集替換
    * 模型結構微調（如 LSTM 層數）





「系統不是由 35 個模組組成，而是由 5 個核心抽象 + 30 個具體實現組成」 → 把「變與不變」分離，就能在不犧牲功能的前提下，實現極致簡潔。 

最小風險路徑
1. 先做 __slots__ + dataclass → 最安全，收益高
2. 再做狀態機 → 簡化風險邏輯
3. 最後做策略註冊 → 需確保 component 輸出格式一致
目標是：
* 提高每小時交易品質
* 降低滑點與延遲
* 減少意外停機
