
v3.15.0—-v3.16.c 啟用三個高級功能無縫整合方案
🔥 核心理念：增量啟用 + 配置驅動
* 不破壞現有功能：所有新功能都有 fallback 機制
* 配置驅動啟用：通過環境變量控制開關
* 漸進式部署：先模擬測試，再實盤驗證
實施方案
📁 1. 新增性能模組結構
src/core/
├── market_regime_predictor.py      # 市場狀態轉換預測器
├── dynamic_feature_generator.py    # 動態特徵生成器  
├── liquidity_hunter.py            # 主動流動性狩獵器
└── performance_modules.py         # 模組管理器（統一入口）
📁 2. 統一模組管理器
# src/core/performance_modules.py
import logging
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)

# 嘗試導入所有性能模組
try:
    from src.core.market_regime_predictor import MarketRegimePredictor
    MARKET_REGIME_PREDICTOR_AVAILABLE = True
except ImportError as e:
    logger.warning(f"⚠️ MarketRegimePredictor 未可用: {e}")
    MARKET_REGIME_PREDICTOR_AVAILABLE = False

try:
    from src.core.dynamic_feature_generator import DynamicFeatureGenerator
    DYNAMIC_FEATURE_GENERATOR_AVAILABLE = True
except ImportError as e:
    logger.warning(f"⚠️ DynamicFeatureGenerator 未可用: {e}")
    DYNAMIC_FEATURE_GENERATOR_AVAILABLE = False

try:
    from src.core.liquidity_hunter import LiquidityHunter
    LIQUIDITY_HUNTER_AVAILABLE = True
except ImportError as e:
    logger.warning(f"⚠️ LiquidityHunter 未可用: {e}")
    LIQUIDITY_HUNTER_AVAILABLE = False

class PerformanceModules:
    """性能模組統一管理器"""
    
    def __init__(self, config):
        self.config = config
        self._init_modules()
    
    def _init_modules(self):
        """初始化所有可用模組"""
        self.market_regime_predictor = None
        self.dynamic_feature_generator = None
        self.liquidity_hunter = None
        
        if self.config.ENABLE_MARKET_REGIME_PREDICTION and MARKET_REGIME_PREDICTOR_AVAILABLE:
            try:
                self.market_regime_predictor = MarketRegimePredictor(self.config)
                logger.info("✅ 市場狀態轉換預測器已啟用")
            except Exception as e:
                logger.error(f"❌ 市場狀態預測器初始化失敗: {e}")
        
        if self.config.ENABLE_DYNAMIC_FEATURES and DYNAMIC_FEATURE_GENERATOR_AVAILABLE:
            try:
                self.dynamic_feature_generator = DynamicFeatureGenerator(self.config)
                logger.info("✅ 動態特徵生成器已啟用")
            except Exception as e:
                logger.error(f"❌ 動態特徵生成器初始化失敗: {e}")
        
        if self.config.ENABLE_LIQUIDITY_HUNTING and LIQUIDITY_HUNTER_AVAILABLE:
            try:
                self.liquidity_hunter = LiquidityHunter(self.config)
                logger.info("✅ 主動流動性狩獵器已啟用")
            except Exception as e:
                logger.error(f"❌ 流動性狩獵器初始化失敗: {e}")
    
    def predict_market_regime(self, current_data: Dict) -> Optional[Dict]:
        """預測市場狀態轉換"""
        if self.market_regime_predictor:
            try:
                return self.market_regime_predictor.predict(current_data)
            except Exception as e:
                logger.warning(f"市場狀態預測失敗: {e}")
        return None
    
    def generate_dynamic_features(self, market_regime: str, recent_data: Dict) -> Optional[Dict]:
        """生成動態特徵"""
        if self.dynamic_feature_generator:
            try:
                return self.dynamic_feature_generator.generate(market_regime, recent_data)
            except Exception as e:
                logger.warning(f"動態特徵生成失敗: {e}")
        return None
    
    def hunt_liquidity(self, symbol: str, current_price: float) -> Optional[Dict]:
        """狩獵流動性"""
        if self.liquidity_hunter:
            try:
                return self.liquidity_hunter.hunt(symbol, current_price)
            except Exception as e:
                logger.warning(f"流動性狩獵失敗: {e}")
        return None

📁 3. 更新配置系統

# src/config.py
# ===== v3.16.0 性能模組配置 =====
ENABLE_MARKET_REGIME_PREDICTION = os.getenv('ENABLE_MARKET_REGIME_PREDICTION', 'false').lower() == 'true'
ENABLE_DYNAMIC_FEATURES = os.getenv('ENABLE_DYNAMIC_FEATURES', 'false').lower() == 'true'
ENABLE_LIQUIDITY_HUNTING = os.getenv('ENABLE_LIQUIDITY_HUNTING', 'false').lower() == 'true'

# 市場狀態預測配置
REGIME_PREDICTION_THRESHOLD = float(os.getenv('REGIME_PREDICTION_THRESHOLD', '0.65'))
REGIME_PREDICTION_LOOKBACK = int(os.getenv('REGIME_PREDICTION_LOOKBACK', '10'))

# 動態特徵配置  
DYNAMIC_FEATURE_MIN_SHARPE = float(os.getenv('DYNAMIC_FEATURE_MIN_SHARPE', '0.3'))
DYNAMIC_FEATURE_MAX_COUNT = int(os.getenv('DYNAMIC_FEATURE_MAX_COUNT', '15'))

# 流動性狩獵配置
LIQUIDITY_HUNT_CONFIDENCE_THRESHOLD = float(os.getenv('LIQUIDITY_HUNT_CONFIDENCE_THRESHOLD', '0.7'))
LIQUIDITY_SLIPPAGE_TOLERANCE = float(os.getenv('LIQUIDITY_SLIPPAGE_TOLERANCE', '0.0015'))
📁 4. 整合到 SelfLearningTrader

# src/strategies/self_learning_trader.py
from src.core.performance_modules import PerformanceModules

class SelfLearningTrader:
    def __init__(self, config):
        self.config = config
        # 🔥 新增：性能模組
        self.performance_modules = PerformanceModules(config)
        # ... 現有初始化代碼 ...
    
    def analyze(self, symbol: str, multi_tf_data: Dict) -> Optional[Dict]:
        """自主學習交易信號生成"""
        try:
            # 1. 市場狀態轉換預測
            market_regime_prediction = None
            if self.config.ENABLE_MARKET_REGIME_PREDICTION:
                market_regime_prediction = self.performance_modules.predict_market_regime(
                    {'symbol': symbol, 'data': multi_tf_data['5m']}
                )
                
                # 只在高概率轉換時交易
                if (market_regime_prediction and 
                    market_regime_prediction.get('confidence', 0) < self.config.REGIME_PREDICTION_THRESHOLD):
                    return None
            
            # 2. 動態特徵生成
            dynamic_features = None
            if self.config.ENABLE_DYNAMIC_FEATURES and market_regime_prediction:
                dynamic_features = self.performance_modules.generate_dynamic_features(
                    market_regime_prediction['predicted_regime'],
                    multi_tf_data['5m'].tail(50)
                )
            
            # 3. 基礎市場結構分析
            market_structure = self.structure_model.encode_structure(
                multi_tf_data['5m']['close'].values
            )
            
            # 4. 主動流動性狩獵
            liquidity_target = None
            if self.config.ENABLE_LIQUIDITY_HUNTING:
                current_price = multi_tf_data['5m']['close'].iloc[-1]
                liquidity_target = self.performance_modules.hunt_liquidity(symbol, current_price)
            
            # 5. 生成交易信號
            signal = self._generate_signal_from_analysis(
                symbol=symbol,
                market_structure=market_structure,
                dynamic_features=dynamic_features,
                liquidity_target=liquidity_target,
                market_regime_prediction=market_regime_prediction,
                multi_tf_data=multi_tf_data
            )
            
            return signal
            
        except Exception as e:
            logger.error(f"SelfLearningTrader 分析錯誤 {symbol}: {e}")
            return None
    
    def _generate_signal_from_analysis(self, **kwargs) -> Dict:
        """從分析結果生成交易信號"""
        symbol = kwargs['symbol']
        market_structure = kwargs['market_structure']
        liquidity_target = kwargs['liquidity_target']
        multi_tf_data = kwargs['multi_tf_data']
        
        # 基礎信號生成
        current_price = multi_tf_data['5m']['close'].iloc[-1]
        direction = self._determine_direction(market_structure)
        
        # 🔥 流動性狩獵調整進場價格
        if liquidity_target and liquidity_target.get('confidence', 0) >= self.config.LIQUIDITY_HUNT_CONFIDENCE_THRESHOLD:
            if direction == 1:  # LONG
                entry_price = liquidity_target.get('support_level', current_price) * 0.999
            else:  # SHORT
                entry_price = liquidity_target.get('resistance_level', current_price) * 1.001
        else:
            entry_price = current_price
        
        # 計算止損止盈
        stop_loss, take_profit = self._calculate_sl_tp(
            entry_price, direction, market_structure, multi_tf_data
        )
        
        signal = {
            'symbol': symbol,
            'direction': direction,
            'entry_price': entry_price,
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'leverage': self._calculate_leverage(market_structure),
            'timestamp': time.time(),
            'confidence': self._calculate_confidence(market_structure, liquidity_target),
            'market_state': kwargs.get('market_regime_prediction', {}).get('predicted_regime', 'unknown'),
            'signal_type': 'self_learning'
        }
        
        return signal

📁 5. 更新 VirtualPositionManager 依賴

# src/managers/virtual_position_manager.py
# 移除個別導入，改用統一管理器
# ❌ 移除這些
# from src.core.memory_mapped_features import MemoryMappedFeatureStore
# from src.core.incremental_feature_cache import IncrementalFeatureCache  
# from src.core.smart_monitoring_scheduler import SmartMonitoringScheduler

# ✅ 改為
from src.core.performance_modules import PerformanceModules

class VirtualPositionManager:
    def __init__(self, binance_client):
        # ... 現有代碼 ...
        
        # 🔥 使用統一性能模組管理器
        self.performance_modules = PerformanceModules(config)
        
        # Lifecycle monitor 保持不變
        self.lifecycle_monitor = VirtualPositionLifecycleMonitor(
            event_callback=self._handle_position_event
        )

部署配置
📋 環境變量啟用
# 啟用所有三個功能
export ENABLE_MARKET_REGIME_PREDICTION="true"
export ENABLE_DYNAMIC_FEATURES="true" 
export ENABLE_LIQUIDITY_HUNTING="true"

# 調整參數（可選）
export REGIME_PREDICTION_THRESHOLD="0.7"
export LIQUIDITY_HUNT_CONFIDENCE_THRESHOLD="0.75"

📋 依賴安裝

# 如果需要額外依賴（可選）
pip install scikit-learn tensorflow  # 市場狀態預測可能需要

 測試驗證
1. 模組可用性測試
# tests/test_performance_modules.py
def test_performance_modules_availability():
    """測試性能模組可用性"""
    from src.core.performance_modules import (
        MARKET_REGIME_PREDICTOR_AVAILABLE,
        DYNAMIC_FEATURE_GENERATOR_AVAILABLE, 
        LIQUIDITY_HUNTER_AVAILABLE
    )
    
    print(f"市場狀態預測器可用: {MARKET_REGIME_PREDICTOR_AVAILABLE}")
    print(f"動態特徵生成器可用: {DYNAMIC_FEATURE_GENERATOR_AVAILABLE}")
    print(f"流動性狩獵器可用: {LIQUIDITY_HUNTER_AVAILABLE}")
    
    # 即使不可用也不應崩潰
    assert True

2. 功能整合測試

def test_self_learning_with_performance_modules():
    """測試 SelfLearningTrader 與性能模組整合"""
    config = Config()
    config.ENABLE_MARKET_REGIME_PREDICTION = True
    config.ENABLE_DYNAMIC_FEATURES = True
    config.ENABLE_LIQUIDITY_HUNTING = True
    
    trader = SelfLearningTrader(config)
    # 測試信號生成不崩潰
    signal = trader.analyze("BTCUSDT", mock_multi_tf_data())
    assert signal is not None

基礎整合
1. 創建性能模組檔案結構
2. 實現統一模組管理器
3. 更新配置系統
4. 整合到 SelfLearningTrader

功能實現
1. 實現 MarketRegimePredictor（LSTM + Attention）
2. 實現 DynamicFeatureGenerator（特徵進化）
3. 實現 LiquidityHunter（基於 @bookTicker）

測試驗證
1. 性能基準測試
